---
pred_heat:
  module: predheat
  class: PredHeat
  
  # Sets the prefix for all created entities in HA - only change if you want to run more than once instance
  prefix: predheat

  # XXX: This is a configuration template, delete this line once you edit your configuration
  # template: True

  # Timezone to work in
  timezone: Europe/London

  # Days forward
  forecast_days: 2

  # Days previous is the number of days back to find historical load data
  # Recommended is 7 to capture day of the week but 1 can also be used
  # if you have more history you could use 7 and 14 (in a list) but the standard data in HA only lasts 10 days
  days_previous: 
    - 7


  # Gas or heatpump mode ('gas' or 'pump')
  mode: gas

  # External temperature sensor
  external_temperature: sensor.external_temperature

  # Internal temperature sensor(s)
  internal_temperature:
    - sensor.living_room_temperature

  # Weather data
  weather: weather.openweathermap

  # Sensor with history that monitors the thermostat setting in the house
  target_temperature: sensor.living_room_target

  # Past energy consumption of heating in KWh
  heating_energy: sensor.boiler_nrgheat

  # Heating is turned on history
  heating_active: binary_sensor.boiler_heatingactive

  # House heat loss in watts per degree temp difference
  heat_loss_watts: 140

  # Static heat sources in the house (e.g. people/equipment)
  heat_gain_static: 200

  # House heat loss in degrees per hour per degre temp difference
  heat_loss_degrees: 0.030

  # Heating max output (of the raditors), in Watts at delta 50 (BTU / 3.41)
  heat_output: 25000 

  # 11 litres per kW for steel panel raditors
  heat_volume: 275

  # Heating max power in Watts
  heat_max_power: 30000
  heat_min_power: 7000

  # Heating cop is the maximum effiency and will be scaled down based on temperatures
  # put 1.0 for condensing gas boilers, or around 4.0 for heat pumps
  heat_cop: 1.0

  # Current flow temperature setting
  flow_temp: number.boiler_heatingtemp
  float_difference_target: 20

  # Energy rates
  metric_octopus_import: 're:(sensor.(octopus_energy_|)gas_[0-9a-z]+_[0-9a-z]+_current_rate)'

  # Standing charge can be set to a sensor (e.g. Octopus) or manually entered in pounds here (e.g. 0.50 is 50p)
  metric_standing_charge: 're:(sensor.(octopus_energy_|)gas_[0-9a-z]+_[0-9a-z]+_current_standing_charge)'

  # Or manual rate
  #rates_import:
  #  -  rate: 7.0